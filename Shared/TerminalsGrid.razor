@using OrdersReaderBlazorApp.Data;


<Grid @ref="grid" TItem="Terminal" class="table table-hover table-bordered table-striped custom-row-color" DataProvider="TerminalsDataProvider" AllowFiltering="true" AllowPaging="true" PageSize="10" Responsive="true" AllowSorting="true">
    <GridColumn TItem="Terminal" HeaderText="Terminal Rec Action ID" PropertyName="terminalRecActionId" SortKeySelector="@(item => item.terminalRecActionIdOrderHelper)" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending">
        @context.terminalRecActionId
    </GridColumn>
    <GridColumn TItem="Terminal" HeaderText="Terminal ID" PropertyName="terminalId">
        @context.terminalId
    </GridColumn>
    <GridColumn TItem="Terminal" HeaderText="Terminal Company ID" PropertyName="terminalCompanyId">
        @context.terminalCompanyId
    </GridColumn>
    <GridColumn TItem="Terminal" HeaderText="Terminal Shop ID" PropertyName="terminalShopId">
        @context.terminalShopId
    </GridColumn>
    <GridColumn TItem="Terminal" HeaderText="Terminal ID" PropertyName="terminalId">
        @context.terminalId
    </GridColumn>
    <GridColumn TItem="Terminal" HeaderText="Terminal Insertion Date" PropertyName="terminalInsertionDate">
        @context.terminalInsertionDate
    </GridColumn>
    <GridColumn TItem="Terminal" HeaderText="Terminal Last Update Date" PropertyName="terminalLastUpdateDate">
        @context.terminalLastUpdateDate
    </GridColumn>
    <GridColumn TItem="Terminal" HeaderText="Terminal Type" PropertyName="terminalType">
        @context.terminalType
    </GridColumn>
</Grid>

@code {


    [Parameter]
    public List<Terminal> terminals { get; set; }

    BlazorBootstrap.Grid<Terminal> grid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<Terminal>> TerminalsDataProvider(GridDataProviderRequest<Terminal> request)
    {
        return await Task.FromResult(request.ApplyTo(terminals));
    }
}


